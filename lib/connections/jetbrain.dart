import '../connections/statistics_singleton.dart';









List<String> getRelatedItems(String input) {
  List<String> related = [];

  if (input.contains('da')) {
    related = beginnersGuide;
  } else if (input.contains('py')) {
    related = pythonRelatedStrings;
  } else if (input.contains('ty')) {
    related = typescriptRelatedStrings;
  } else if (input.contains('ja')) {
    related = javaScript;
  } else if (input.contains('people')) {
    related = peoples.toList();
  } else if (input.contains('tag')) {
    related = tags.toList();
  } else if (input.contains('links')) {
    related = links.toList();
  } else if (input.contains('sql')) {
    related = sqlSnippets.toList();
  } else if (input.contains('pro')) {
    related = userdata.toList();
  } else if (input.contains('snip')) {
    related = beginnersGuide.toList();
  } else {
    related = ['related item not found'];
  }

  return related;
}





List<String> peoples = StatisticsSingleton().statistics?.persons ?? [];
List<String> links = StatisticsSingleton().statistics?.relatedLinks ?? [];
List<String> tags = StatisticsSingleton().statistics?.tags ?? [];
List<String> languages = StatisticsSingleton().statistics?.classifications.keys.toList() ?? [];
List<String> userdata = [
  // (StatisticsSingleton().statistics?.userPicture ?? ''),
  '''
    "${StatisticsSingleton().statistics?.email}"
    "${StatisticsSingleton().statistics?.versionProfile}",
    "${StatisticsSingleton().statistics?.platform}",
    

'''
];
int index = StatisticsSingleton().statistics?.asset.length ?? 0;
List<String> snippetList = [
  ' ${StatisticsSingleton().statistics?.asset.toList()[index].name ?? ''}'
];

List<String> snippetName = snippetList.where((element) => element.isNotEmpty).toList();
List<String> dartRelatedStrings = [
  'Dart',
  'Flutter',
  'Client-side programming',
  'Server-side programming',
  'Cross-platform development',
  'Object-oriented programming',
  'Functional programming',
  'SDK',
  'IDE',
  'Hot reload',
  'DartPad',
  'Pub',
  'Dart SDK',
  'Flutter SDK',
  'Dart VM',
  'Dart code',
  'Dart syntax',
  'Dart libraries',
  'Dart packages',
  'Dart plugins',
  'Dart tools',
  'Dart framework',
  'Dart programming language',
  'Dart classes',
  'Dart objects',
  'Dart variables',
  'Dart functions',
  'Dart streams',
  'Dart Futures',
  'Dart isolates',
  'Dart async',
  'Dart await',
  'Dart callbacks',
  'Dart closure',
  'Dart inheritance',
  'Dart abstract class',
  'Dart interface',
  'Dart mixins',
  'Dart generics',
  'Dart type system',
  'Dart type inference',
  'Dart operator overloading',
  'Dart exception handling',
  'Dart asserts',
  'Dart collections',
  'Dart lists',
  'Dart maps',
  'Dart sets',
  'Dart enums',
  'Dart optional parameters',
  'Dart named parameters',
  'Dart optional named parameters',
  'Dart constructors',
  'Dart getters',
  'Dart setters',
  'Dart extensions',
  'Dart metadata',
  'Dart constants',
  'Dart final',
  'Dart static',
  'Dart keyword',
  'Dart literals',
  'Dart comment',
  'Dart style guide',
  'Dart best practices',
  'Dart patterns',
  'Dart debugging',
  'Dart testing',
  'Dart asserts',
  'Dart mock objects',
  'Dart integration tests',
  'Dart unit tests',
  'Dart test runner',
  'Dart coverage',
  'Dart code analysis',
  'Dart static analysis',
  'Dart linting',
  'Dart Dart2JS',
  'Dart VM',
  'Dart native extensions',
  'Dart strong mode',
  'Dart null safety',
  'Dart sound null safety',
  'Dart type inference engine',
  'Dart packages repository',
  'Dart open-source libraries',
  'Dart third-party packages',
  'Dart community',
  'Dart meetups',
  'Dart conferences',
  'Dart events',
  'Dart news',
  'Dart blogs',
  'Dart podcasts',
  'Dart forums',
  'Dart Discord',
  'Dart Stack Overflow',
];

List<String> pythonRelatedStrings = [
  'Python',
  'Data science',
  'Artificial intelligence',
  'Machine learning',
  'Data analysis',
  'Automation',
  'Scripting',
  'Object-oriented programming',
  'Functional programming',
  'PyPI',
  'IDE',
  'Interactive mode',
  'Virtual environment',
  'Package manager',
  'Library',
  'Module',
  'Syntax',
  'Variables',
  'Operators',
  'Conditional statements',
  'Loops',
  'Functions',
  'Lambda functions',
  'List comprehensions',
  'Tuples',
  'Dictionaries',
  'Sets',
  'Strings',
  'Files',
  'Exception handling',
  'Debugging',
  'Testing',
  'Unittest',
  'Mock objects',
  'Pytest',
  'Docstrings',
  'Type hints',
  'Classes',
  'Objects',
  'Inheritance',
  'Encapsulation',
  'Polymorphism',
  'Abstraction',
  'Metaclasses',
  'Decorators',
  'Generators',
  'Coroutines',
  'Iterators',
  'Context managers',
  'Regular expressions',
  'Pattern matching',
  'Numeric libraries',
  'Scientific computing',
  'Data visualization',
  'Matplotlib',
  'Seaborn',
  'Plotly',
  'Pandas',
  'Numpy',
  'Scipy',
  'Web frameworks',
  'Django',
  'Flask',
  'FastAPI',
  'SQLAlchemy',
  'ORM',
  'RESTful API',
  'Web scraping',
  'Beautiful Soup',
  'Scrapy',
  'Command line interfaces',
  'Argparse',
  'Click',
  'Fire',
  'Cryptography',
  'SSL',
  'TLS',
  'Hashing',
  'Encryption',
  'Key generation',
  'Public key cryptography',
  'Asynchronous programming',
  'Multithreading',
  'Concurrency',
  'Parallel processing',
  'GIL',
  'C extensions',
  'PyPy',
  'Jupyter Notebook',
  'IPython',
  'Colab',
  'Anaconda',
  'Virtualenv',
  'Conda',
  'Community',
  'Conferences',
  'Meetups',
  'Forums',
  'Blogs',
  'Podcasts',
  'Books',
  'Tutorials',
  'Online courses',
  'Stack Overflow',
  'GitHub',
];
List<String> typescriptRelatedStrings = [
  'TypeScript',
  'Programming',
  'Web development',
  'Strong typing',
  'Interfaces',
  'Classes',
  'Object-oriented programming',
  'Functions',
  'Lambdas',
  'Generics',
  'Modules',
  'Namespaces',
  'Decorators',
  'Enums',
  'Syntax',
  'Variables',
  'Constants',
  'Operators',
  'Conditional statements',
  'Loops',
  'Array type',
  'Tuple type',
  'Union type',
  'Intersection type',
  'Type inference',
  'Explicit type declaration',
  'Type casting',
  'Type compatibility',
  'Type guards',
  'Null and Undefined',
  'Any type',
  'Unknown type',
  'Never type',
  'Object type',
  'Type assertions',
  'Accessors',
  'Constructors',
  'Static properties and methods',
  'Inheritance',
  'Abstraction',
  'Polymorphism',
  'Asynchronous programming',
  'Callbacks',
  'Promises',
  'Async/await',
  'Iterators',
  'Generators',
  'Iterable protocols',
  'Spread operator',
  'Destructuring',
  'Map and Set',
  'Symbol type',
  'ES6 features',
  'ES7 features',
  'ES8 features',
  'ES9 features',
  'ES10 features',
  'ESNext features',
  'Transpilation',
  'TypeScript compiler',
  'TypeScript config file',
  'TypeScript definitions',
  'TypeScript playground',
  'TypeScript and React',
  'TypeScript and Angular',
  'TypeScript and Vue',
  'TypeScript and Node.js',
  'TypeScript and Deno',
  'TypeScript and Webpack',
  'TypeScript and Babel',
  'TypeScript and Rollup',
  'TypeScript and Jest',
  'TypeScript and Mocha',
  'TypeScript and Chai',
  'TypeScript and Cypress',
  'TypeScript and Puppeteer',
  'TypeScript and Selenium',
  'TypeScript and Nightwatch',
  'TypeScript and Visual Studio Code',
  'TypeScript and Sublime Text',
  'TypeScript and Atom',
  'TypeScript and JetBrains IDEs',
  'TypeScript and GitHub',
  'TypeScript and Stack Overflow',
  'TypeScript and Reddit',
  'TypeScript and Twitter',
  'TypeScript and YouTube',
  'TypeScript and Medium',
  'TypeScript and Dev.to',
  'TypeScript and Udemy',
  'TypeScript and Coursera',
  'TypeScript and Pluralsight',
  'TypeScript and LinkedIn Learning',
  'TypeScript and freeCodeCamp',
  'TypeScript and Codecademy',
  'TypeScript and W3Schools',
  'TypeScript and MDN Web Docs',
];

List<String> javaScript = [
  'javascript',
  'js',
  'nodejs',
  'web development',
  'front end',
  'full stack',
  'html',
  'css',
  'jquery',
  'ajax',
  'es6',
  'es7',
  'es8',
  'es9',
  'es10',
  'json',
  'xml',
  'angular',
  'react',
  'vue',
  'express',
  'meteor',
  'mongoDB',
  'sql',
  'nosql',
  'firebase',
  'redux',
  'nextjs',
  'gatsby',
  'sass',
  'less',
  'postcss',
  'typescript',
  'babel',
  'webpack',
  'rollup',
  'parcel',
  'jest',
  'mocha',
  'chai',
  'sinon',
  'jshint',
  'eslint',
  'prettier',
  'browserify',
  'grunt',
  'gulp',
  'web components',
  'shadow dom',
  'custom elements',
  'polyfills',
  'html5',
  'css3',
  'responsive design',
  'mobile first',
  'progressive web apps',
  'single page apps',
  'multi page apps',
  'client side',
  'server side',
  'full stack development',
  'mean stack',
  'mern stack',
  'rest api',
  'graphql api',
  'socket.io',
  'real time web apps',
  'microservices',
  'continuous integration',
  'continuous delivery',
  'continuous deployment',
  'devops',
  'docker',
  'kubernetes',
  'serverless',
  'cloud computing',
  'amazon web services',
  'google cloud platform',
  'azure',
  'cloud functions',
  'lambda functions',
  'firebase functions',
  'functions as a service',
  'serverless computing',
  'serverless framework',
  'static site generator',
  'static site hosting',
  'static file hosting',
  'https',
  'ssl certificate',
  'tls certificate',
  'domain name',
  'web hosting',
  'shared hosting',
  'virtual private server',
  'dedicated server',
  'cloud hosting',
  'content delivery network',
  'dns server',
  'domain name system',
];

List<String> sqlTerms = [
  'SQL',
  'SELECT',
  'FROM',
  'WHERE',
  'GROUP BY',
  'HAVING',
  'ORDER BY',
  'LIMIT',
  'OFFSET',
  'JOIN',
  'INNER JOIN',
  'LEFT JOIN',
  'RIGHT JOIN',
  'FULL OUTER JOIN',
  'UNION',
  'INTERSECT',
  'EXCEPT',
  'INSERT INTO',
  'UPDATE',
  'DELETE',
  'CREATE TABLE',
  'ALTER TABLE',
  'DROP TABLE',
  'TRUNCATE TABLE',
  'AS',
  'ON',
  'USING',
  'DISTINCT',
  'IN',
  'BETWEEN',
  'LIKE',
  'IS NULL',
  'IS NOT NULL',
  'EXISTS',
  'ALL',
  'ANY',
  'SOME',
  'AVG',
  'COUNT',
  'MAX',
  'MIN',
  'SUM',
  'GROUP_CONCAT',
  'CONCAT',
  'SUBSTRING',
  'TRIM',
  'UPPER',
  'LOWER',
  'ROUND',
  'CEILING',
  'FLOOR',
  'ABS',
  'SIGN',
  'MOD',
  'POW',
  'SQRT',
  'LOG',
  'EXP',
  'PI',
  'RAND',
  'WITH ROLLUP',
  'HAVING',
  'CASE',
  'WHEN',
  'THEN',
  'ELSE',
  'END',
  'COALESCE',
  'NULLIF',
  'IFNULL',
  'ISNULL',
  'IF',
  'EXISTS',
  'NOT EXISTS',
  'INNER',
  'LEFT',
  'RIGHT',
  'FULL OUTER',
  'CROSS',
  'UNION ALL',
  'UNION',
  'INTERSECT',
  'EXCEPT',
  'ASC',
  'DESC',
  'INDEX',
  'PRIMARY KEY',
  'FOREIGN KEY',
  'UNIQUE',
  'CHECK',
  'DEFAULT',
  'CONSTRAINT',
  'TRIGGER',
  'VIEW',
  'PROCEDURE',
  'FUNCTION',
  'CASCADE',
  'RESTRICT',
  'NO ACTION',
  'SET NULL',
  'SET DEFAULT',
];
List<String> beginnersGuide = [
  "print('Hello, Dart!');",
  "var name = 'Dart';\nprint('Hello, \$name!');",
  "var x = 10;\nvar y = 20;\nprint('The sum of x and y is: \${x + y}');",
  'var numbers = [1, 2, 3, 4, 5];\nprint(numbers);',
  "var person = {'name': 'John Doe', 'age': 30};\nprint(person);",
  'var isTrue = true;\nvar isFalse = false;\nprint(isTrue);\nprint(isFalse);',
  "if (10 > 5) {\n  print('10 is greater than 5');\n}",
  'for (var i = 0; i < 5; i++) {\n  print(i);\n}',
  'var numbers = [1, 2, 3, 4, 5];\nfor (var number in numbers) {\n  print(number);\n}',
  'var i = 0;\nwhile (i < 5) {\n  print(i);\n  i++;\n}',
  'var add = (int a, int b) => a + b;\nprint(add(10, 20));',
  "class Car {\n  String make;\n  String model;\n\n  Car(this.make, this.model);\n}\n\nvar car = Car('Toyota', 'Camry');\nprint(car.make);\nprint(car.model);",
  'void printSum(int a, int b) {\n  print(a + b);\n}\n\nprintSum(10, 20);',
  'var list = [1, 2, 3, 4, 5];\nlist.',
  'var list = [1, 2, 3, 4, 5];\nvar doubled = list.map((item) => item * 2);\nprint(doubled);',
  'var list = [1, 2, 3, 4, 5];\nvar sum = list.reduce((current, next) => current + next);\nprint(sum);',
  'var list = [1, 2, 3, 4, 5];\nvar first = list.first;\nprint(first);',
  'var list = [1, 2, 3, 4, 5];\nvar last = list.last;\nprint(last);',
  'var list = [1, 2, 3, 4, 5];\nvar length = list.length;\nprint(length);',
  'var list = [1, 2, 3, 4, 5];\nvar isEmpty = list.isEmpty;\nprint(isEmpty);',
  'var list = [1, 2, 3, 4, 5];\nvar isNotEmpty = list.isNotEmpty;\nprint(isNotEmpty);',
];
List<String> sqlSnippets = [
  "SELECT * FROM customers;",
  "SELECT first_name, last_name FROM customers;",
  "SELECT COUNT(*) FROM customers;",
  "SELECT DISTINCT country FROM customers;",
  "SELECT * FROM customers WHERE country = 'USA';",
  "SELECT * FROM customers WHERE country = 'USA' OR country = 'UK';",
  "SELECT * FROM customers WHERE country IN ('USA', 'UK');",
  "SELECT * FROM customers ORDER BY first_name;",
  "SELECT * FROM customers ORDER BY first_name DESC;",
  "SELECT * FROM customers WHERE country = 'USA' ORDER BY first_name DESC;",
  "SELECT AVG(amount) FROM orders;",
  "SELECT SUM(amount) FROM orders;",
  "SELECT MAX(amount) FROM orders;",
  "SELECT MIN(amount) FROM orders;",
  "SELECT * FROM customers JOIN orders ON customers.customer_id = orders.customer_id;",
  "SELECT * FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id;",
  "SELECT * FROM customers RIGHT JOIN orders ON customers.customer_id = orders.customer_id;",
  "SELECT * FROM customers FULL OUTER JOIN orders ON customers.customer_id = orders.customer_id;",
  "SELECT * FROM customers CROSS JOIN orders;",
  "SELECT * FROM customers WHERE country = 'USA' AND (state = 'CA' OR state = 'NY');",
  "SELECT first_name, last_name, country, state FROM customers GROUP BY country, state;",
  "SELECT country, COUNT(*) FROM customers GROUP BY country;",
  "SELECT country, SUM(amount) FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY country;",
  "SELECT * FROM customers LIMIT 10;",
  "SELECT * FROM customers OFFSET 10;",
  "SELECT * FROM customers LIMIT 10 OFFSET 10;",
  "CREATE TABLE customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), country VARCHAR(50), state VARCHAR(50));",
  "ALTER TABLE customers ADD COLUMN email VARCHAR(100);",
  "ALTER TABLE customers DROP COLUMN email;",
  "ALTER TABLE customers RENAME COLUMN first_name TO firstName;",
  "INSERT INTO customers (customer_id, first_name, last_name, country, state) VALUES (1, 'John', 'Doe', 'USA', 'CA');",
  "UPDATE customers SET first_name = 'Jane' WHERE customer_id = 1;",
  "DELETE FROM customers WHERE customer_id = 1;",
  "CREATE INDEX idx_customers_first_name ON customers (first_name);",
  "DROP INDEX idx_customers_first_name;",
  "CREATE UNIQUE INDEX idx_customers_first_name_last_name ON customers (first_name, last",
];